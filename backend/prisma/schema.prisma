// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id
  email              String         @unique
  password           String
  name               String
  emailNotifications Boolean        @default(true)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  trackedItems       TrackedItem[]
  alerts             PriceAlert[]
  notifications      Notification[]
}

model Store {
  id             String        @id
  name           String        @unique
  domain         String?
  logoUrl        String?
  isActive       Boolean       @default(true)
  scrapeType     String        @default("html") // "html", "api", "custom"
  minDelayMs     Int           @default(5000) // Rate limiting: 5 seconds between requests
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  trackedItems   TrackedItem[]

  @@index([isActive])
}

model TrackedItem {
  id            String         @id
  userId        String
  storeId       String
  name          String
  description   String?
  imageUrl      String?
  productUrl    String
  sku           String?
  currentPrice  Float?
  currency      String         @default("EUR")
  targetPrice   Float?
  isTracking    Boolean        @default(true)
  lastCheckedAt DateTime?
  category      String?
  status        String         @default("tracking") // tracking, paused, purchased
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  store         Store          @relation(fields: [storeId], references: [id])
  priceHistory  PriceHistory[]
  alerts        PriceAlert[]

  @@index([userId])
  @@index([storeId])
  @@index([isTracking])
}

model PriceHistory {
  id          String      @id
  itemId      String
  price       Float
  currency    String      @default("EUR")
  isAvailable Boolean     @default(true)
  checkedAt   DateTime    @default(now())
  item        TrackedItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@index([itemId, checkedAt])
}

model PriceAlert {
  id              String         @id
  userId          String
  itemId          String
  type            String // "price_drop", "target_reached", "percentage_drop", "back_in_stock"
  triggerPrice    Float?
  percentageDrop  Int?
  isActive        Boolean        @default(true)
  lastTriggeredAt DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  item            TrackedItem    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  notifications   Notification[]

  @@index([itemId, isActive])
  @@index([userId])
}

model Notification {
  id        String      @id
  userId    String
  alertId   String?
  type      String // "price_drop", "target_reached", "error", "info"
  channel   String      @default("email") // "email", "push", "webhook"
  status    String      @default("pending") // "pending", "sent", "failed"
  title     String
  message   String
  data      String? // JSON with extra data
  sentAt    DateTime?
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  alert     PriceAlert? @relation(fields: [alertId], references: [id], onDelete: SetNull)

  @@index([userId, status])
  @@index([status])
}
